syntax = "proto3";

package confidence.flags.admin.v1;

import "google/api/client.proto";
import "google/api/resource.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/type/decimal.proto";

import "confidence/flags/types/v1/target.proto";
import "confidence/flags/admin/v1/types.proto";
import "confidence/flags/resolver/v1/events/events.proto";

option java_package = "com.spotify.confidence.flags.admin.v1";
option java_multiple_files = true;
option java_outer_classname = "ApiProto";

// The service manages flags and its related resources: rules, segments, and
// variants.
service FlagAdminService {
  // Writes pre-aggregated information about how a flag has been resolved. Mostly called from the resolver
  rpc WriteResolveInfo(WriteResolveInfoRequest) returns (WriteResolveInfoResponse){
    option (google.api.http) = {
      post: "/v1/resolveInfo:write"
      body: "*"
    };
  }

  // Writes flag assignment events. Mostly called from the sidecar resolver.
  // (-- api-linter: core::0136::http-uri-suffix=disabled
  //     aip.dev/not-precedent: Disabled because the additional binding. --)
  rpc WriteFlagAssigned(WriteFlagAssignedRequest) returns (WriteFlagAssignedResponse){
    option (google.api.http) = {
      post: "/v1/flagAssigned:write"
      body: "*"
      additional_bindings {
        post: "/v1/flagAssigned:writeArray"
        body: "flag_assigned"
      }
    };
  }
}

// A request to write flag assignments
message WriteFlagAssignedRequest {
  // List of flag assigned events to write
  repeated confidence.flags.resolver.v1.events.FlagAssigned flag_assigned = 1;
}

// Response to writing flag assignments
message WriteFlagAssignedResponse {
  // The total number of assigned flags, should equal the sum of the flag counts in each flag
  // assigned event.
  int64 assigned_flags = 1;
}

// A request to write flag resolve info
message WriteResolveInfoRequest {
  // Information about how clients have resolved
  repeated ClientResolveInfo client_resolve_info = 1;
  // Information about how flags were resolved
  repeated FlagResolveInfo flag_resolve_info = 2;

  // Information about how a single flag has been resolved
  message FlagResolveInfo {
    // The flag the info is about
    string flag = 1 [
      (google.api.resource_reference).type = "flags.confidence.dev/Flag",
      (google.api.field_behavior) = REQUIRED
    ];
    // Information about how variants were resolved.
    repeated VariantResolveInfo variant_resolve_info = 2;
    // Information about how rules were resolved.
    repeated RuleResolveInfo rule_resolve_info = 3;

    // Information about how a variant was resolved.
    message VariantResolveInfo {
      // If there was a variant assigned, otherwise not set
      string variant = 1  [
        (google.api.resource_reference).type = "flags.confidence.dev/Variant",
        (google.api.field_behavior) = OPTIONAL
      ];
      // Number of times the variant was resolved in this period
      int64 count = 3 [(google.api.field_behavior) = REQUIRED];
    }

    // Information about how a rule was resolved.
    message RuleResolveInfo {
      // The rule that was resolved
      string rule = 1  [
        (google.api.resource_reference).type = "flags.confidence.dev/Rule",
        (google.api.field_behavior) = REQUIRED
      ];
      // Number of times the rule was resolved in this period
      int64 count = 2 [(google.api.field_behavior) = REQUIRED];

      // Resolve counts on each assignment
      repeated AssignmentResolveInfo assignment_resolve_info = 3 [(google.api.field_behavior) = OPTIONAL];
    }

    // Information about the assignment that was resolved.
    message AssignmentResolveInfo {
      // The assignment id of the resolved value, otherwise not set.
      string assignment_id = 1 [(google.api.field_behavior) = OPTIONAL];

      // Number of times the assignment id was resolved in this period.
      int64 count = 2 [(google.api.field_behavior) = REQUIRED];
    }
  }

  // Information about how a client resolved
  message ClientResolveInfo {
    // Resource reference to a client.
    string client = 1 [
      (google.api.resource_reference).type = "iam.confidence.dev/Client",
      (google.api.field_behavior) = REQUIRED
    ];

    // Resource reference to a credential.
    string client_credential = 2 [
      (google.api.resource_reference).type = "iam.confidence.dev/ClientCredential",
      (google.api.field_behavior) = REQUIRED
    ];

    // The different evaluation context schema of the client that have been seen recently.
    repeated EvaluationContextSchemaInstance schema = 3;

    // An instance of a schema that was seen
    message EvaluationContextSchemaInstance {
      // Schema of each field in the evaluation context.
      map<string, EvaluationContextSchemaField.Kind> schema = 1;
      // Optional semantic type per field.
      map<string, ContextFieldSemanticType> semantic_types = 2;
    }
  }
}

// Response to writing resolve info
message WriteResolveInfoResponse {

}
